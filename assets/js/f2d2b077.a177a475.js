"use strict";(self.webpackChunkreact_native_testing_library_website=self.webpackChunkreact_native_testing_library_website||[]).push([[154],{3905:function(e,t,r){r.d(t,{Zo:function(){return u},kt:function(){return b}});var i=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function n(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,i)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?n(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):n(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,i,a=function(e,t){if(null==e)return{};var r,i,a={},n=Object.keys(e);for(i=0;i<n.length;i++)r=n[i],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(i=0;i<n.length;i++)r=n[i],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var o=i.createContext({}),c=function(e){var t=i.useContext(o),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},u=function(e){var t=c(e.components);return i.createElement(o.Provider,{value:t},e.children)},p="mdxType",y={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},h=i.forwardRef((function(e,t){var r=e.components,a=e.mdxType,n=e.originalType,o=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=c(r),h=a,b=p["".concat(o,".").concat(h)]||p[h]||y[h]||n;return r?i.createElement(b,l(l({ref:t},u),{},{components:r})):i.createElement(b,l({ref:t},u))}));function b(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var n=r.length,l=new Array(n);l[0]=h;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s[p]="string"==typeof e?e:a,l[1]=s;for(var c=2;c<n;c++)l[c]=r[c];return i.createElement.apply(null,l)}return i.createElement.apply(null,r)}h.displayName="MDXCreateElement"},9052:function(e,t,r){r.r(t),r.d(t,{assets:function(){return u},contentTitle:function(){return o},default:function(){return b},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return p}});var i=r(7462),a=r(3366),n=(r(7294),r(3905)),l=["components"],s={id:"how-should-i-query",title:"How Should I Query?"},o=void 0,c={unversionedId:"how-should-i-query",id:"how-should-i-query",title:"How Should I Query?",description:"Priority",source:"@site/docs/HowShouldIQuery.md",sourceDirName:".",slug:"/how-should-i-query",permalink:"/react-native-testing-library/docs/how-should-i-query",draft:!1,editUrl:"https://github.com/callstack/react-native-testing-library/blob/main/website/docs/HowShouldIQuery.md",tags:[],version:"current",frontMatter:{id:"how-should-i-query",title:"How Should I Query?"},sidebar:"docs",previous:{title:"Troubleshooting",permalink:"/react-native-testing-library/docs/troubleshooting"},next:{title:"ESLint Plugin Testing Library Compatibility",permalink:"/react-native-testing-library/docs/eslint-plugin-testing-library"}},u={},p=[{value:"Priority",id:"priority",level:2}],y={toc:p},h="wrapper";function b(e){var t=e.components,r=(0,a.Z)(e,l);return(0,n.kt)(h,(0,i.Z)({},y,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h2",{id:"priority"},"Priority"),(0,n.kt)("p",null,"Based on the ",(0,n.kt)("a",{parentName:"p",href:"https://testing-library.com/docs/guiding-principles"},"Guiding Principles"),", your test should resemble how users interact with your code (component, page, etc.) as much as possible. With this in mind, we recommend this order of priority:"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("strong",{parentName:"li"},"Queries Accessible to Everyone")," queries that reflect the experience of visual users as well as those that use assistive technology",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://callstack.github.io/react-native-testing-library/docs/api-queries#bytext"},(0,n.kt)("inlineCode",{parentName:"a"},"getByText")),": This is the number 1 method a user finds any visible text on interactive and non-interactive elements."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://callstack.github.io/react-native-testing-library/docs/api-queries#bydisplayvalue"},(0,n.kt)("inlineCode",{parentName:"a"},"getByDisplayValue")),": Useful for the current value of a ",(0,n.kt)("inlineCode",{parentName:"li"},"TextInput"),"."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://callstack.github.io/react-native-testing-library/docs/api-queries#byplaceholdertext"},(0,n.kt)("inlineCode",{parentName:"a"},"getByPlaceholderText")),": Only useful for targeting a placeholder of a ",(0,n.kt)("inlineCode",{parentName:"li"},"TextInput"),"."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://callstack.github.io/react-native-testing-library/docs/api-queries#bylabeltext"},(0,n.kt)("inlineCode",{parentName:"a"},"getByLabelText")),": This can be used to query every element that is exposed in the accessibility tree as a label, usually when there's no visible text."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://callstack.github.io/react-native-testing-library/docs/api-queries#bya11yhint-byaccessibilityhint-byhinttext"},(0,n.kt)("inlineCode",{parentName:"a"},"getByHintText")),": This can be used to query every element that is exposed in the accessibility tree as a hint. Make sure it also has a label set."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://callstack.github.io/react-native-testing-library/docs/api-queries#bya11ystate-byaccessibilitystate"},(0,n.kt)("inlineCode",{parentName:"a"},"getByAccessibilityState")),": This can be used to query every element that is exposed in the accessibility tree as a state of an interactive element, like a checkbox."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://callstack.github.io/react-native-testing-library/docs/api-queries#bya11value-byaccessibilityvalue"},(0,n.kt)("inlineCode",{parentName:"a"},"getByAccessibilityValue")),": This can be used to query every element that is exposed in the accessibility tree as a value on a range, like a slider."))),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("strong",{parentName:"li"},"Queries Users Can Infer"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://callstack.github.io/react-native-testing-library/docs/api-queries#byrole"},(0,n.kt)("inlineCode",{parentName:"a"},"getByRole")),": This can be used to query every element that is exposed in the accessibility tree as a role, like buttons or images."))),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("strong",{parentName:"li"},"Test IDs"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://callstack.github.io/react-native-testing-library/docs/api-queries#bytestid"},(0,n.kt)("inlineCode",{parentName:"a"},"getByTestId")),": The user cannot see (or hear) these, so this is only recommended for cases where you can't match by text or it doesn't make sense")))))}b.isMDXComponent=!0}}]);