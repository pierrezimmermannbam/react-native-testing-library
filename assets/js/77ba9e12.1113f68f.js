"use strict";(self.webpackChunkreact_native_testing_library_website=self.webpackChunkreact_native_testing_library_website||[]).push([[625],{3905:function(e,t,n){n.d(t,{Zo:function(){return l},kt:function(){return g}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),d=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},l=function(e){var t=d(e.components);return r.createElement(c.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),p=d(n),m=o,g=p["".concat(c,".").concat(m)]||p[m]||u[m]||i;return n?r.createElement(g,a(a({ref:t},l),{},{components:n})):r.createElement(g,a({ref:t},l))}));function g(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=m;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[p]="string"==typeof e?e:o,a[1]=s;for(var d=2;d<i;d++)a[d]=n[d];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},8848:function(e,t,n){n.r(t),n.d(t,{assets:function(){return l},contentTitle:function(){return c},default:function(){return g},frontMatter:function(){return s},metadata:function(){return d},toc:function(){return p}});var r=n(7462),o=n(3366),i=(n(7294),n(3905)),a=["components"],s={id:"redux-integration",title:"Redux Integration"},c=void 0,d={unversionedId:"redux-integration",id:"redux-integration",title:"Redux Integration",description:"This section deals with testing RN applications developed with Redux. We will be developing a simple TODO application capable of adding and removing an item. Once included, the timestamp is included.",source:"@site/docs/ReduxIntegration.md",sourceDirName:".",slug:"/redux-integration",permalink:"/react-native-testing-library/docs/redux-integration",draft:!1,editUrl:"https://github.com/callstack/react-native-testing-library/blob/main/website/docs/ReduxIntegration.md",tags:[],version:"current",frontMatter:{id:"redux-integration",title:"Redux Integration"},sidebar:"docs",previous:{title:"React Navigation",permalink:"/react-native-testing-library/docs/react-navigation"}},l={},p=[{value:"Setting up",id:"setting-up",level:2},{value:"Test cases",id:"test-cases",level:2},{value:"Running tests",id:"running-tests",level:2}],u={toc:p},m="wrapper";function g(e){var t=e.components,n=(0,o.Z)(e,a);return(0,i.kt)(m,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"This section deals with testing RN applications developed with Redux. We will be developing a simple TODO application capable of adding and removing an item. Once included, the timestamp is included."),(0,i.kt)("h2",{id:"setting-up"},"Setting up"),(0,i.kt)("p",null,"An example of setting up can be found ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/callstack/react-native-testing-library/tree/main/examples/redux"},"here"),"."),(0,i.kt)("h2",{id:"test-cases"},"Test cases"),(0,i.kt)("p",null,"Our test is on the components that either dispatch actions on the redux store or read some data from the redux store. This means we will test ",(0,i.kt)("inlineCode",{parentName:"p"},"./components/AddTodo.js")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"./components/TodoList.js"),". Thus we will create ",(0,i.kt)("inlineCode",{parentName:"p"},"./components/AddTodo.test.js")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"./components/TodoList.test.js")),(0,i.kt)("p",null,"For ",(0,i.kt)("inlineCode",{parentName:"p"},"./components/AddTodo.test.js")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"import * as React from 'react';\nimport { Provider } from 'react-redux';\nimport { render, screen, fireEvent } from '@testing-library/react-native';\nimport configureStore from '../store';\nimport AddTodo from './AddTodo';\n\ndescribe('AddTodo component test', () => {\n  test('adds a new TODO when the button is pressed', () => {\n    const store = configureStore();\n\n    const component = (\n      <Provider store={store}>\n        <AddTodo />\n      </Provider>\n    );\n\n    render(component);\n\n    // There is a TextInput.\n    // https://github.com/callstack/react-native-testing-library/blob/ae3d4af370487e1e8fedd8219f77225690aefc59/examples/redux/components/AddTodo.js#L24\n    const input = screen.getByPlaceholderText(/repository/i);\n    expect(input).toBeOnTheScreen();\n\n    const textToEnter = 'This is a random element';\n    fireEvent.changeText(input, textToEnter);\n    fireEvent.press(screen.getByText('Submit form'));\n\n    const todosState = store.getState().todos;\n\n    expect(todosState.length).toEqual(1);\n\n    expect(todosState).toEqual(\n      expect.arrayContaining([\n        expect.objectContaining({\n          id: 1,\n          text: textToEnter,\n          date: expect.any(Date),\n        }),\n      ])\n    );\n  });\n});\n")),(0,i.kt)("p",null,"For ",(0,i.kt)("inlineCode",{parentName:"p"},"./components/TodoList.test.js")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx"},"import * as React from 'react';\nimport { Provider } from 'react-redux';\nimport { render, screen, fireEvent } from '@testing-library/react-native';\nimport configureStore from '../store';\nimport TodoList from './TodoList';\n\ndescribe('TodoList component test', () => {\n  test('it should execute with a store with 4 elements', () => {\n    const initialState = {\n      todos: [\n        { id: 1, text: 'Sing something', date: new Date() },\n        { id: 2, text: 'Dance something', date: new Date() },\n        { id: 3, text: 'Sleep something', date: new Date() },\n        { id: 4, text: 'Sleep something', date: new Date() },\n      ],\n    };\n    const store = configureStore(initialState);\n\n    const component = (\n      <Provider store={store}>\n        <TodoList />\n      </Provider>\n    );\n\n    render(component);\n    const todoElems = screen.getAllByText(/something/i);\n\n    expect(todoElems.length).toEqual(4);\n  });\n\n  test('should execute with 2 elements and end up with 1 after delete', () => {\n    const initialState = {\n      todos: [\n        { id: 1, text: 'Sing something', date: new Date() },\n        { id: 2, text: 'Dance something', date: new Date() },\n      ],\n    };\n    const store = configureStore(initialState);\n\n    const component = (\n      <Provider store={store}>\n        <TodoList />\n      </Provider>\n    );\n\n    render(component);\n    const todoElems = screen.getAllByText(/something/i);\n\n    expect(todoElems.length).toBe(2);\n\n    const buttons = screen.getAllByText('Delete');\n    expect(buttons.length).toBe(2);\n\n    fireEvent.press(buttons[0]);\n    expect(screen.getAllByText('Delete').length).toBe(1);\n  });\n});\n")),(0,i.kt)("h2",{id:"running-tests"},"Running tests"),(0,i.kt)("p",null,"To run the tests, place a test script inside your package.json"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "scripts": {\n    "test": "jest"\n  }\n}\n')),(0,i.kt)("p",null,"And run the test script with npm test or yarn test."))}g.isMDXComponent=!0}}]);