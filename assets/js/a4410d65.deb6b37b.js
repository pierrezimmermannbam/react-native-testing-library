"use strict";(self.webpackChunkreact_native_testing_library_website=self.webpackChunkreact_native_testing_library_website||[]).push([[968],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return h}});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},d=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,l=e.originalType,s=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),p=c(n),u=i,h=p["".concat(s,".").concat(u)]||p[u]||m[u]||l;return n?a.createElement(h,r(r({ref:t},d),{},{components:n})):a.createElement(h,r({ref:t},d))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var l=n.length,r=new Array(l);r[0]=u;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[p]="string"==typeof e?e:i,r[1]=o;for(var c=2;c<l;c++)r[c]=n[c];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},3901:function(e,t,n){n.d(t,{Z:function(){return r}});var a=n(7294),i=n(3743),l={tableOfContentsInline:"tableOfContentsInline_prmo"};function r(e){var t=e.toc,n=e.minHeadingLevel,r=e.maxHeadingLevel;return a.createElement("div",{className:l.tableOfContentsInline},a.createElement(i.Z,{toc:t,minHeadingLevel:n,maxHeadingLevel:r,className:"table-of-contents",linkClassName:null}))}},3743:function(e,t,n){n.d(t,{Z:function(){return b}});var a=n(7462),i=n(3366),l=n(7294),r=n(6668),o=["parentIndex"];function s(e){var t=e.map((function(e){return Object.assign({},e,{parentIndex:-1,children:[]})})),n=Array(7).fill(-1);t.forEach((function(e,t){var a=n.slice(2,e.level);e.parentIndex=Math.max.apply(Math,a),n[e.level]=t}));var a=[];return t.forEach((function(e){var n=e.parentIndex,l=(0,i.Z)(e,o);n>=0?t[n].children.push(l):a.push(l)})),a}function c(e){var t=e.toc,n=e.minHeadingLevel,a=e.maxHeadingLevel;return t.flatMap((function(e){var t=c({toc:e.children,minHeadingLevel:n,maxHeadingLevel:a});return function(e){return e.level>=n&&e.level<=a}(e)?[Object.assign({},e,{children:t})]:t}))}function d(e){var t=e.getBoundingClientRect();return t.top===t.bottom?d(e.parentNode):t}function p(e,t){var n,a,i=t.anchorTopOffset,l=e.find((function(e){return d(e).top>=i}));return l?function(e){return e.top>0&&e.bottom<window.innerHeight/2}(d(l))?l:null!=(a=e[e.indexOf(l)-1])?a:null:null!=(n=e[e.length-1])?n:null}function m(){var e=(0,l.useRef)(0),t=(0,r.L)().navbar.hideOnScroll;return(0,l.useEffect)((function(){e.current=t?0:document.querySelector(".navbar").clientHeight}),[t]),e}function u(e){var t=(0,l.useRef)(void 0),n=m();(0,l.useEffect)((function(){if(!e)return function(){};var a=e.linkClassName,i=e.linkActiveClassName,l=e.minHeadingLevel,r=e.maxHeadingLevel;function o(){var e=function(e){return Array.from(document.getElementsByClassName(e))}(a),o=function(e){for(var t=e.minHeadingLevel,n=e.maxHeadingLevel,a=[],i=t;i<=n;i+=1)a.push("h"+i+".anchor");return Array.from(document.querySelectorAll(a.join()))}({minHeadingLevel:l,maxHeadingLevel:r}),s=p(o,{anchorTopOffset:n.current}),c=e.find((function(e){return s&&s.id===function(e){return decodeURIComponent(e.href.substring(e.href.indexOf("#")+1))}(e)}));e.forEach((function(e){!function(e,n){n?(t.current&&t.current!==e&&t.current.classList.remove(i),e.classList.add(i),t.current=e):e.classList.remove(i)}(e,e===c)}))}return document.addEventListener("scroll",o),document.addEventListener("resize",o),o(),function(){document.removeEventListener("scroll",o),document.removeEventListener("resize",o)}}),[e,n])}function h(e){var t=e.toc,n=e.className,a=e.linkClassName,i=e.isChild;return t.length?l.createElement("ul",{className:i?void 0:n},t.map((function(e){return l.createElement("li",{key:e.id},l.createElement("a",{href:"#"+e.id,className:null!=a?a:void 0,dangerouslySetInnerHTML:{__html:e.value}}),l.createElement(h,{isChild:!0,toc:e.children,className:n,linkClassName:a}))}))):null}var v=l.memo(h),k=["toc","className","linkClassName","linkActiveClassName","minHeadingLevel","maxHeadingLevel"];function b(e){var t=e.toc,n=e.className,o=void 0===n?"table-of-contents table-of-contents__left-border":n,d=e.linkClassName,p=void 0===d?"table-of-contents__link":d,m=e.linkActiveClassName,h=void 0===m?void 0:m,b=e.minHeadingLevel,f=e.maxHeadingLevel,y=(0,i.Z)(e,k),g=(0,r.L)(),N=null!=b?b:g.tableOfContents.minHeadingLevel,C=null!=f?f:g.tableOfContents.maxHeadingLevel,x=function(e){var t=e.toc,n=e.minHeadingLevel,a=e.maxHeadingLevel;return(0,l.useMemo)((function(){return c({toc:s(t),minHeadingLevel:n,maxHeadingLevel:a})}),[t,n,a])}({toc:t,minHeadingLevel:N,maxHeadingLevel:C});return u((0,l.useMemo)((function(){if(p&&h)return{linkClassName:p,linkActiveClassName:h,minHeadingLevel:N,maxHeadingLevel:C}}),[p,h,N,C])),l.createElement(v,(0,a.Z)({toc:x,className:o,linkClassName:p},y))}},4909:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return c},default:function(){return v},frontMatter:function(){return s},metadata:function(){return d},toc:function(){return m}});var a=n(7462),i=n(3366),l=(n(7294),n(3905)),r=n(3901),o=["components"],s={id:"jest-matchers",title:"Jest Matchers"},c=void 0,d={unversionedId:"jest-matchers",id:"jest-matchers",title:"Jest Matchers",description:"Built-in Jest matchers require RNTL v12.4.0 or later.",source:"@site/docs/JestMatchers.md",sourceDirName:".",slug:"/jest-matchers",permalink:"/react-native-testing-library/docs/jest-matchers",draft:!1,editUrl:"https://github.com/callstack/react-native-testing-library/blob/main/website/docs/JestMatchers.md",tags:[],version:"current",frontMatter:{id:"jest-matchers",title:"Jest Matchers"}},p={},m=[{value:"Element Existence",id:"element-existence",level:2},{value:"<code>toBeOnTheScreen()</code>",id:"tobeonthescreen",level:3},{value:"Element Content",id:"element-content",level:2},{value:"<code>toHaveTextContent()</code>",id:"tohavetextcontent",level:3},{value:"<code>toContainElement()</code>",id:"tocontainelement",level:3},{value:"<code>toBeEmptyElement()</code>",id:"tobeemptyelement",level:3},{value:"Element State",id:"element-state",level:2},{value:"<code>toHaveDisplayValue()</code>",id:"tohavedisplayvalue",level:3},{value:"<code>toHaveAccessibilityValue()</code>",id:"tohaveaccessibilityvalue",level:3},{value:"<code>toBeEnabled()</code> / <code>toBeDisabled</code>",id:"tobeenabled",level:3},{value:"<code>toBeSelected()</code>",id:"tobeselected",level:3},{value:"<code>toBeChecked()</code> / <code>toBePartiallyChecked()</code>",id:"tobechecked",level:3},{value:"<code>toBeExpanded()</code> /  <code>toBeCollapsed()</code>",id:"tobeexpanded",level:3},{value:"<code>toBeBusy()</code>",id:"tobebusy",level:3},{value:"Element Styles",id:"element-styles",level:2},{value:"<code>toBeVisible()</code>",id:"tobevisible",level:3},{value:"<code>toHaveStyle()</code>",id:"tohavestyle",level:3},{value:"Other",id:"other",level:2},{value:"<code>toHaveAccessibleName()</code>",id:"tohaveaccessiblename",level:3},{value:"<code>toHaveProp()</code>",id:"tohaveprop",level:3}],u={toc:m},h="wrapper";function v(e){var t=e.components,n=(0,i.Z)(e,o);return(0,l.kt)(h,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("admonition",{type:"note"},(0,l.kt)("p",{parentName:"admonition"},"Built-in Jest matchers require RNTL v12.4.0 or later.")),(0,l.kt)("p",null,"This guide describes built-in Jest matchers, we recommend using these matchers as they provide more readable tests, better accessibility support, and a better developer experience."),(0,l.kt)("p",null,"If you are already using legacy Jest Native matchers we have a ",(0,l.kt)("a",{parentName:"p",href:"migration-jest-native"},"migration guide")," for moving to the built-in matchers."),(0,l.kt)(r.Z,{toc:m,mdxType:"TOCInline"}),(0,l.kt)("h2",{id:"element-existence"},"Element Existence"),(0,l.kt)("h3",{id:"tobeonthescreen"},(0,l.kt)("inlineCode",{parentName:"h3"},"toBeOnTheScreen()")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"expect(element).toBeOnTheScreen()\n")),(0,l.kt)("p",null,"This allows you to assert whether an element is attached to the element tree or not. If you hold a reference to an element and it gets unmounted during the test it will no longer pass this assertion."),(0,l.kt)("h2",{id:"element-content"},"Element Content"),(0,l.kt)("h3",{id:"tohavetextcontent"},(0,l.kt)("inlineCode",{parentName:"h3"},"toHaveTextContent()")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"expect(element).toHaveTextContent(\n  text: string | RegExp,\n  options?: {\n    exact?: boolean;\n    normalizer?: (text: string) => string;\n  },\n)\n")),(0,l.kt)("p",null,"This allows you to assert whether the given element has the given text content or not. It accepts either ",(0,l.kt)("inlineCode",{parentName:"p"},"string")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"RegExp")," matchers, as well as ",(0,l.kt)("a",{parentName:"p",href:"/react-native-testing-library/docs/api-queries#text-match-options"},"text match options")," of ",(0,l.kt)("inlineCode",{parentName:"p"},"exact")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"normalizer"),"."),(0,l.kt)("h3",{id:"tocontainelement"},(0,l.kt)("inlineCode",{parentName:"h3"},"toContainElement()")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"expect(container).toContainElement(\n  element: ReactTestInstance | null,\n)\n")),(0,l.kt)("p",null,"This allows you to assert whether the given container element does contain another host element."),(0,l.kt)("h3",{id:"tobeemptyelement"},(0,l.kt)("inlineCode",{parentName:"h3"},"toBeEmptyElement()")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"expect(element).toBeEmptyElement()\n")),(0,l.kt)("p",null,"This allows you to assert whether the given element does not have any host child elements or text content."),(0,l.kt)("h2",{id:"element-state"},"Element State"),(0,l.kt)("h3",{id:"tohavedisplayvalue"},(0,l.kt)("inlineCode",{parentName:"h3"},"toHaveDisplayValue()")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"expect(element).toHaveDisplayValue(\n  value: string | RegExp,\n  options?: {\n    exact?: boolean;\n    normalizer?: (text: string) => string;\n  },\n)\n")),(0,l.kt)("p",null,"This allows you to assert whether the given ",(0,l.kt)("inlineCode",{parentName:"p"},"TextInput")," element has a specified display value. It accepts either ",(0,l.kt)("inlineCode",{parentName:"p"},"string")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"RegExp")," matchers, as well as ",(0,l.kt)("a",{parentName:"p",href:"/react-native-testing-library/docs/api-queries#text-match-options"},"text match options")," of ",(0,l.kt)("inlineCode",{parentName:"p"},"exact")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"normalizer"),"."),(0,l.kt)("h3",{id:"tohaveaccessibilityvalue"},(0,l.kt)("inlineCode",{parentName:"h3"},"toHaveAccessibilityValue()")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"expect(element).toHaveAccessibilityValue(\n  value: {\n    min?: number;\n    max?: number;\n    now?: number;\n    text?: string | RegExp;\n  },\n)\n")),(0,l.kt)("p",null,"This allows you to assert whether the given element has a specified accessible value."),(0,l.kt)("p",null,"This matcher will assert accessibility value based on ",(0,l.kt)("inlineCode",{parentName:"p"},"aria-valuemin"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"aria-valuemax"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"aria-valuenow"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"aria-valuetext")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"accessibilityValue")," props. Only defined value entries will be used in the assertion,  the element might have additional accessibility value entries and still be matched."),(0,l.kt)("p",null,"When querying by ",(0,l.kt)("inlineCode",{parentName:"p"},"text")," entry a string or ",(0,l.kt)("inlineCode",{parentName:"p"},"RegExp")," might be used."),(0,l.kt)("h3",{id:"tobeenabled"},(0,l.kt)("inlineCode",{parentName:"h3"},"toBeEnabled()")," / ",(0,l.kt)("inlineCode",{parentName:"h3"},"toBeDisabled")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"expect(element).toBeEnabled()\nexpect(element).toBeDisabled()\n")),(0,l.kt)("p",null,"These allow you to assert whether the given element is enabled or disabled from the user's perspective. It relies on the accessibility disabled state as set by ",(0,l.kt)("inlineCode",{parentName:"p"},"aria-disabled")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"accessibilityState.disabled")," props. It will consider a given element disabled when it or any of its ancestors is disabled."),(0,l.kt)("admonition",{type:"note"},(0,l.kt)("p",{parentName:"admonition"},"These matchers are the negation of each other, and both are provided to avoid double negations in your assertions.")),(0,l.kt)("h3",{id:"tobeselected"},(0,l.kt)("inlineCode",{parentName:"h3"},"toBeSelected()")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"expect(element).toBeSelected()\n")),(0,l.kt)("p",null,"This allows you to assert whether the given element is selected from the user's perspective. It relies on the accessibility selected state as set by ",(0,l.kt)("inlineCode",{parentName:"p"},"aria-selected")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"accessibilityState.selected")," props."),(0,l.kt)("h3",{id:"tobechecked"},(0,l.kt)("inlineCode",{parentName:"h3"},"toBeChecked()")," / ",(0,l.kt)("inlineCode",{parentName:"h3"},"toBePartiallyChecked()")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"expect(element).toBeChecked()\nexpect(element).toBePartiallyChecked()\n")),(0,l.kt)("p",null,"These allow you to assert whether the given element is checked or partially checked from the user's perspective. It relies on the accessibility checked state as set by ",(0,l.kt)("inlineCode",{parentName:"p"},"aria-checked")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"accessibilityState.checked")," props."),(0,l.kt)("admonition",{type:"note"},(0,l.kt)("ul",{parentName:"admonition"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"toBeChecked()")," matcher works only on elements with the ",(0,l.kt)("inlineCode",{parentName:"li"},"checkbox")," or ",(0,l.kt)("inlineCode",{parentName:"li"},"radio")," role."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"toBePartiallyChecked()")," matcher works only on elements with the ",(0,l.kt)("inlineCode",{parentName:"li"},"checkbox")," role."))),(0,l.kt)("h3",{id:"tobeexpanded"},(0,l.kt)("inlineCode",{parentName:"h3"},"toBeExpanded()")," /  ",(0,l.kt)("inlineCode",{parentName:"h3"},"toBeCollapsed()")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"expect(element).toBeExpanded()\nexpect(element).toBeCollapsed()\n")),(0,l.kt)("p",null,"These allows you to assert whether the given element is expanded or collapsed from the user's perspective. It relies on the accessibility disabled state as set by ",(0,l.kt)("inlineCode",{parentName:"p"},"aria-expanded")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"accessibilityState.expanded")," props."),(0,l.kt)("admonition",{type:"note"},(0,l.kt)("p",{parentName:"admonition"},"These matchers are the negation of each other for expandable elements (elements with explicit ",(0,l.kt)("inlineCode",{parentName:"p"},"aria-expanded")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"accessibilityState.expanded")," props). However, both won't pass for non-expandable elements (ones without explicit ",(0,l.kt)("inlineCode",{parentName:"p"},"aria-expanded")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"accessibilityState.expanded")," props).")),(0,l.kt)("h3",{id:"tobebusy"},(0,l.kt)("inlineCode",{parentName:"h3"},"toBeBusy()")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"expect(element).toBeBusy()\n")),(0,l.kt)("p",null,"This allows you to assert whether the given element is busy from the user's perspective. It relies on the accessibility selected state as set by ",(0,l.kt)("inlineCode",{parentName:"p"},"aria-busy")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"accessibilityState.busy")," props."),(0,l.kt)("h2",{id:"element-styles"},"Element Styles"),(0,l.kt)("h3",{id:"tobevisible"},(0,l.kt)("inlineCode",{parentName:"h3"},"toBeVisible()")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"expect(element).toBeVisible()\n")),(0,l.kt)("p",null,"This allows you to assert whether the given element is visible from the user's perspective. "),(0,l.kt)("p",null,"The element is considered invisible when itself or any of its ancestors has ",(0,l.kt)("inlineCode",{parentName:"p"},"display: none")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"opacity: 0")," styles, as well as when it's hidden from accessibility."),(0,l.kt)("h3",{id:"tohavestyle"},(0,l.kt)("inlineCode",{parentName:"h3"},"toHaveStyle()")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"expect(element).toHaveStyle(\n  style: StyleProp<Style>,\n)\n")),(0,l.kt)("p",null,"This allows you to assert whether the given element has given styles. "),(0,l.kt)("h2",{id:"other"},"Other"),(0,l.kt)("h3",{id:"tohaveaccessiblename"},(0,l.kt)("inlineCode",{parentName:"h3"},"toHaveAccessibleName()")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"expect(element).toHaveAccessibleName(\n  name?: string | RegExp,\n  options?: {\n    exact?: boolean;\n    normalizer?: (text: string) => string;\n  },\n)\n")),(0,l.kt)("p",null,"This allows you to assert whether the given element has a specified accessible name. It accepts either ",(0,l.kt)("inlineCode",{parentName:"p"},"string")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"RegExp")," matchers, as well as ",(0,l.kt)("a",{parentName:"p",href:"/react-native-testing-library/docs/api-queries#text-match-options"},"text match options")," of ",(0,l.kt)("inlineCode",{parentName:"p"},"exact")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"normalizer"),"."),(0,l.kt)("p",null,"The accessible name will be computed based on ",(0,l.kt)("inlineCode",{parentName:"p"},"aria-labelledby"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"accessibilityLabelledBy"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"aria-label"),", and ",(0,l.kt)("inlineCode",{parentName:"p"},"accessibilityLabel")," props, in the absence of these props, the element text content will be used."),(0,l.kt)("p",null,"When the ",(0,l.kt)("inlineCode",{parentName:"p"},"name")," parameter is ",(0,l.kt)("inlineCode",{parentName:"p"},"undefined")," it will only check if the element has any accessible name."),(0,l.kt)("h3",{id:"tohaveprop"},(0,l.kt)("inlineCode",{parentName:"h3"},"toHaveProp()")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"expect(element).toHaveProp(\n  name: string,\n  value?: unknown,\n)\n")),(0,l.kt)("p",null,"This allows you to assert whether the given element has a given prop. When the ",(0,l.kt)("inlineCode",{parentName:"p"},"value")," parameter is ",(0,l.kt)("inlineCode",{parentName:"p"},"undefined")," it will only check for existence of the prop, and when ",(0,l.kt)("inlineCode",{parentName:"p"},"value")," is defined it will check if the actual value matches passed value."),(0,l.kt)("admonition",{type:"note"},(0,l.kt)("p",{parentName:"admonition"},"This matcher should be treated as an escape hatch to be used when all other matchers are not suitable.")))}v.isMDXComponent=!0}}]);